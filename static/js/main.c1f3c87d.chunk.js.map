{"version":3,"sources":["logo.svg","components/ContactForm.js","firebase.js","components/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactForm","props","initialFieldValues","fullName","mobile","email","address","useState","values","setValues","useEffect","currentId","contactObjects","handleInputChange","e","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","className","placeholder","onChange","type","fireDb","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Contacts","setContactObjects","setCurrentId","firebaseDb","child","on","snapshot","val","obj","push","err","console","log","set","Object","keys","map","id","key","onClick","window","confirm","remove","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,2ICqF5BC,EAnFK,SAACC,GACjB,IAAMC,EAAqB,CACvBC,SAAU,GACVC,OAAQ,GACRC,MAAO,GACPC,QAAS,IALc,EAQDC,mBAASL,GARR,mBAQtBM,EARsB,KAQdC,EARc,KAU3BC,qBAAU,WACiB,IAAnBT,EAAMU,UACNF,EAAU,eACHP,IAGPO,EAAU,eACHR,EAAMW,eAAeX,EAAMU,eAEvC,CAACV,EAAMU,UAAWV,EAAMW,iBAE3B,IAAMC,EAAoB,SAAAC,GAAM,IAAD,EACLA,EAAEC,OAAlBC,EADqB,EACrBA,KAAMC,EADe,EACfA,MACZR,EAAU,eACHD,EADE,eAEJQ,EAAOC,MAQhB,OACI,0BAAMC,aAAa,MAAMC,SANJ,SAAAL,GACrBA,EAAEM,iBACFnB,EAAMoB,UAAUb,KAKZ,yBAAKc,UAAU,0BACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,kBAGrB,2BAAOA,UAAU,eAAeC,YAAY,YAAYP,KAAK,WACzDC,MAAOT,EAAOL,SACdqB,SAAUX,KAGlB,yBAAKS,UAAU,YACX,yBAAKA,UAAU,mCACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,wBAGrB,2BAAOA,UAAU,eAAeC,YAAY,SAASP,KAAK,SACtDC,MAAOT,EAAOJ,OACdoB,SAAUX,KAGlB,yBAAKS,UAAU,mCACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,sBAGrB,2BAAOA,UAAU,eAAeC,YAAY,QAAQP,KAAK,QACrDC,MAAOT,EAAOH,MACdmB,SAAUX,MAItB,yBAAKS,UAAU,cACX,8BAAUA,UAAU,eAAeC,YAAY,UAAUP,KAAK,UAC1DC,MAAOT,EAAOF,QACdkB,SAAUX,KAGlB,yBAAKS,UAAU,cACX,2BAAOG,KAAK,SAASR,MAA0B,IAAnBhB,EAAMU,UAAkB,OAAS,SAAUW,UAAU,iCClEhFI,E,MAFFC,cATQ,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,uDACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,gBACnBC,MAAO,+CAIeC,WAAWC,MC6FpBC,EAtGE,WAAO,IAAD,EAEuB9B,mBAAS,IAFhC,mBAEdK,EAFc,KAEE0B,EAFF,OAGa/B,mBAAS,IAHtB,mBAGdI,EAHc,KAGH4B,EAHG,KAKnB7B,qBAAU,WACN8B,EAAWC,MAAM,YAAYC,GAAG,SAAS,SAAAC,GACf,MAAlBA,EAASC,MACTN,EAAkB,eACXK,EAASC,QAGhBN,EAAkB,SAG3B,IAuCH,OACI,oCACI,yBAAKhB,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,yBAAd,sBAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,kBAAC,EAAiB,CAAED,UA9ClB,SAAAwB,GACG,IAAblC,EACA6B,EAAWC,MAAM,YAAYK,KACzBD,GACA,SAAAE,GACQA,EACAC,QAAQC,IAAIF,GAEZR,EAAa,OAIzBC,EAAWC,MAAX,mBAA6B9B,IAAauC,IACtCL,GACA,SAAAE,GACQA,EACAC,QAAQC,IAAIF,GAEZR,EAAa,QA4Bc5B,YAAWC,oBAE9C,yBAAKU,UAAU,YACX,2BAAOA,UAAU,yCACb,2BAAOA,UAAU,eACb,4BACI,yCACA,sCACA,qCACA,yCAGR,+BAEQ6B,OAAOC,KAAKxC,GAAgByC,KAAI,SAAAC,GAC5B,OAAO,wBAAIC,IAAKD,GACZ,4BAAK1C,EAAe0C,GAAInD,UACxB,4BAAKS,EAAe0C,GAAIlD,QACxB,4BAAKQ,EAAe0C,GAAIjD,OACxB,4BACI,uBAAGiB,UAAU,mBAAmBkC,QAAS,WAAQjB,EAAae,KAC1D,uBAAGhC,UAAU,uBAEjB,uBAAGA,UAAU,kBAAkBkC,QAAS,WA9C/D,IAAAD,IA8CgFD,EA7CzFG,OAAOC,QAAQ,wCAEflB,EAAWC,MAAX,mBAA6Bc,IAAOI,QAChC,SAAAZ,GACQA,EACAC,QAAQC,IAAIF,GAEZR,EAAa,SAuCW,uBAAGjB,UAAU,iCC5E9CsC,MAVf,WACE,OACE,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,SCGYuC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.c1f3c87d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\n\nconst ContactForm = (props) => {\n    const initialFieldValues = {\n        fullName: '',\n        mobile: '',\n        email: '',\n        address: ''\n    }\n\n    var [values, setValues] = useState(initialFieldValues)\n\n    useEffect(() => {\n        if (props.currentId == '')\n            setValues({\n                ...initialFieldValues\n            })\n        else\n            setValues({\n                ...props.contactObjects[props.currentId]\n            })\n    }, [props.currentId, props.contactObjects])\n\n    const handleInputChange = e => {\n        var { name, value } = e.target\n        setValues({\n            ...values,\n            [name]: value\n        })\n    }\n    const handleFormSubmit = e => {\n        e.preventDefault();\n        props.addOrEdit(values)\n    }\n\n    return (\n        <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\n            <div className=\"form-group input-group\">\n                <div className=\"input-group-prepend\">\n                    <div className=\"input-group-text\">\n                        <i className=\"fas fa-user\"></i>\n                    </div>\n                </div>\n                <input className=\"form-control\" placeholder=\"Full Name\" name=\"fullName\"\n                    value={values.fullName}\n                    onChange={handleInputChange}\n                />\n            </div>\n            <div className=\"form-row\">\n                <div className=\"form-group input-group col-md-6\">\n                    <div className=\"input-group-prepend\">\n                        <div className=\"input-group-text\">\n                            <i className=\"fas fa-mobile-alt\"></i>\n                        </div>\n                    </div>\n                    <input className=\"form-control\" placeholder=\"Mobile\" name=\"mobile\"\n                        value={values.mobile}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div className=\"form-group input-group col-md-6\">\n                    <div className=\"input-group-prepend\">\n                        <div className=\"input-group-text\">\n                            <i className=\"fas fa-envelope\"></i>\n                        </div>\n                    </div>\n                    <input className=\"form-control\" placeholder=\"Email\" name=\"email\"\n                        value={values.email}\n                        onChange={handleInputChange}\n                    />\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <textarea className=\"form-control\" placeholder=\"Address\" name=\"address\"\n                    value={values.address}\n                    onChange={handleInputChange}\n                />\n            </div>\n            <div className=\"form-group\">\n                <input type=\"submit\" value={props.currentId == '' ? \"Save\" : \"Update\"} className=\"btn btn-primary btn-block\" />\n            </div>\n        </form >\n    );\n}\n\nexport default ContactForm;","import * as firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDcdUst0t9zD9OqGFh6jEUXQD48jlp-s60\",\n  authDomain: \"react-crud-96b0f.firebaseapp.com\",\n  databaseURL: \"https://react-crud-96b0f-default-rtdb.firebaseio.com\",\n  projectId: \"react-crud-96b0f\",\n  storageBucket: \"react-crud-96b0f.appspot.com\",\n  messagingSenderId: \"1015994363752\",\n  appId: \"1:1015994363752:web:764384ff0e0e3a5b7bb0dd\"\n};\n  var fireDb = firebase.initializeApp(firebaseConfig);\n\n  export default fireDb.database().ref();","import React, { useState, useEffect } from \"react\";\nimport ContactForm from \"./ContactForm\"\nimport firebaseDb from \"../firebase\";\n\nconst Contacts = () => {\n\n    var [contactObjects, setContactObjects] = useState({})\n    var [currentId, setCurrentId] = useState('')\n\n    useEffect(() => {\n        firebaseDb.child('contacts').on('value', snapshot => {\n            if (snapshot.val() != null)\n                setContactObjects({\n                    ...snapshot.val()\n                })\n            else\n                setContactObjects({})\n\n        })\n    }, [])// similar to componentDidMount\n\n    const addOrEdit = obj => {\n        if (currentId == '')\n            firebaseDb.child('contacts').push(\n                obj,\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n        else\n            firebaseDb.child(`contacts/${currentId}`).set(\n                obj,\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n    }\n\n    const onDelete = key => {\n        if (window.confirm('Are you sure to delete this record?')) {\n            debugger\n            firebaseDb.child(`contacts/${key}`).remove(\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n        }\n    }\n\n    return (\n        <>\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <h1 className=\"display-4 text-center\">Contact Register</h1>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-5\">\n                    <ContactForm {...({ addOrEdit, currentId, contactObjects })} />\n                </div>\n                <div className=\"col-md-7\">\n                    <table className=\"table table-borderless table-stripped\">\n                        <thead className=\"thead-light\">\n                            <tr>\n                                <th>Full Name</th>\n                                <th>Mobile</th>\n                                <th>Email</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                Object.keys(contactObjects).map(id => {\n                                    return <tr key={id}>\n                                        <td>{contactObjects[id].fullName}</td>\n                                        <td>{contactObjects[id].mobile}</td>\n                                        <td>{contactObjects[id].email}</td>\n                                        <td>\n                                            <a className=\"btn text-primary\" onClick={() => { setCurrentId(id) }}>\n                                                <i className=\"fas fa-pencil-alt\"></i>\n                                            </a>\n                                            <a className=\"btn text-danger\" onClick={() => { onDelete(id) }}>\n                                                <i className=\"far fa-trash-alt\"></i>\n                                            </a>\n                                        </td>\n                                    </tr>\n                                })\n                            }\n                        </tbody>\n                    </table>\n\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Contacts;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Contacts from './components/Contacts';\n\nfunction App() {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-8 offset-md-2\">\n        <Contacts />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}